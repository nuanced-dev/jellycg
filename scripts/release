#!/usr/bin/env bash

set -eu

echo "Starting release process..."

# Check for required dependencies
echo "Checking required dependencies..."
for cmd in gh git node npm; do
    if ! command -v "$cmd" &> /dev/null; then
        echo "Error: $cmd is not installed or not in PATH"
        exit 1
    fi
done

# Read package name and version from package.json
echo "Reading package metadata..."
package_name=$(node -p "require('./package.json').name")
version=$(node -p "require('./package.json').version")
echo "Package: $package_name@$version"

# Verify that the git working directory is not dirty
echo "Checking git working directory is clean..."
if ! status="$(git status --porcelain)" || [ -n "$status" ]; then
    echo "Error: Git working directory is dirty. Please commit or stash your changes."
    exit 1
fi

# Check permissions
echo "Checking gh repo permissions..."
scopes=" $(gh api -i user | grep X-Oauth-Scopes | cut -c17-),"
for scope in repo workflow; do
    if ! echo "$scopes" | grep -q " $scope,"; then
        echo "Error: gh is missing 'repo' permission"
        exit 1
    fi
done

# Install locked npm dependencies
echo "Installing locked npm dependencies..."
npm ci

# Run npm pack and capture the resulting tgz filename
echo "Creating package archive..."
temp_dir=$(mktemp -d)
function cleanup {
    echo Removing "$temp_dir"
    rm -rf "$temp_dir"
}
trap cleanup EXIT
original_file=$(npm pack --pack-destination="$temp_dir" | tail -n 1)
original_path="$temp_dir/$original_file"
echo "Package archive created at: $original_path"

# Rename the tgz to packageName-version.tar.gz
new_file="${package_name##*/}-${version}.tar.gz"
new_path="$temp_dir/$new_file"
mv "$original_path" "$new_path"
echo "Package archive renamed to: $new_path"

# Create a GitHub release using gh
echo "Creating GitHub release..."
release_tag="v$version"
gh release create "$release_tag" "$new_path" \
    --title "Release $version" \
    --generate-notes \
    --latest
echo "Package archive uploaded: $new_file"
echo "Release $version created successfully!"
