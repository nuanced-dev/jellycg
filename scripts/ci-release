#!/usr/bin/env bash

## This script is run from a workflow whenever a version tag of the shape `v*` is pushed.
## DO NOT RUN THIS SCRIPT MANUALLY! The version tag pushed by `gh release create` would
## trigger a workflow run that will also invoke this script.

set -eu

echo "Starting release process..."

# Parse optional argument
tag_ref=
if [ $# -eq 1 ]; then
    tag_ref="$1"
elif [ $# -gt 1 ]; then
    echo "Error: unexpected arguments"
    echo "Usage: $0 [tag-ref]"
    exit 1
fi

# Check for required dependencies
echo "Checking required dependencies..."
for cmd in gh git node npm; do
    if ! command -v "$cmd" &> /dev/null; then
        echo "Error: $cmd is not installed or not in PATH"
        exit 1
    fi
done

# Read package name and version from package.json
echo "Reading package metadata..."
package_name=$(node -p "require('./package.json').name")
version=$(node -p "require('./package.json').version")
echo "Package: $package_name@$version"

# If tag_ref is provided, verify it matches the package.json version
if [ -n "$tag_ref" ]; then
    echo "Checking that tag matches package version..."
    expected_tag="refs/tags/v$version"
    if [ "$tag_ref" != "$expected_tag" ]; then
        echo "Error: tag '$tag_ref' does not match expected tag '$expected_tag' for version $version"
        exit 1
    fi
fi

# Ensure there's a line `[version] - current_date` in CHANGELOG.md
if [ -f "CHANGELOG.md" ]; then
    echo "Checking changelog entry..."
    current_date=$(date +%Y-%m-%d)
    changelog_line="## [$version] - $current_date"
    if ! grep -q -Fx "$changelog_line" CHANGELOG.md; then
        echo "Error: missing CHANGELOG.md entry: $changelog_line"
        exit 1
    fi
fi

# Install locked npm dependencies
echo "Installing locked npm dependencies..."
npm ci

# Run npm pack and capture the resulting tgz filename
echo "Creating package archive..."
temp_dir=$(mktemp -d)
function cleanup {
    echo Removing "$temp_dir"
    rm -rf "$temp_dir"
}
trap cleanup EXIT
original_file=$(npm pack --pack-destination="$temp_dir" | tail -n 1)
original_path="$temp_dir/$original_file"
echo "Package archive created at: $original_path"

# Verify that the git working directory is clean after build
echo "Checking git working directory is clean..."
if ! status="$(git status --porcelain)" || [ -n "$status" ]; then
    echo "Error: Git working directory is dirty. Please commit or stash your changes."
    exit 1
fi

# Rename the tgz to packageName-version.tar.gz
new_file="${package_name##*/}-${version}.tar.gz"
new_path="$temp_dir/$new_file"
mv "$original_path" "$new_path"
echo "Package archive renamed to: $new_path"

# Create a GitHub release using gh
echo "Creating GitHub release..."
release_tag="v$version"
gh release create "$release_tag" "$new_path" \
    --title "Release $version" \
    --generate-notes \
    --latest
echo "Package archive uploaded: $new_file"
echo "Release $version created successfully!"
